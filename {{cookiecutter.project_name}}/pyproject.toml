[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.package_version}}"
description = "{{cookiecutter.package_description}}"
authors = ["{{cookiecutter.author_name}} <{{cookiecutter.author_email}}>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/{{cookiecutter.github_homepage}}/{{cookiecutter.project_name}}"
repository = "https://github.com/{{cookiecutter.github_homepage}}/{{cookiecutter.project_name}}"
packages = [
    { include = "{{cookiecutter.package_name}}", from = "src" },
]
classifiers = [
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.urls]
Changelog = "https://github.com/{{cookiecutter.github_homepage}}/{{cookiecutter.project_name}}/releases"

[tool.poetry.dependencies]
typer = "^0.6.1"
python = ">=3.12.0,<3.13.0"

[tool.poetry.group.dev.dependencies]
{% if cookiecutter.use_docs == "yes" -%}
mkdocs-material = "^8.4.2"
{% endif -%}
mypy = "^0.971"
pytest = "^7.0.0"
pytest-asyncio = "^0.19.0"
pytest-cov = "^3.0.0"
ruff = "^0.1.8"
typeguard = "^2.13.3"

[tool.poetry.scripts]
{{cookiecutter.project_name}} = "{{cookiecutter.package_name}}.main:app"

{% endif -%}
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
strict = true
warn_return_any = false
show_column_numbers = true
show_error_codes = true

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100","D104", "D105", "D106", "D107"]

[tool.ruff]
line-length = 100
lint.select = [
    "D",   # pydocstyle
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = ["{{cookiecutter.package_name}}"]

[tool.coverage.paths]
source = ["src"]
tests = ["tests"]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.package_name}}"]

[tool.coverage.report]
show_missing = true
fail_under = 100
omit = [
  "*/*init*",
]
